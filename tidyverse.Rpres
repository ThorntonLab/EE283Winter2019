The "tidyverse"
========================================================
author: 
date: 
autosize: true

Background
========================================================

* You are probably familiar with "base" R, which is the set of features that come with R by default.
* While useful, the interface is inconsistent across different areas, and certain common operations
are clumsily-supported
* The "tidyverse" is an attempt to improve this situation with a modern and consistent interface.
* The "tidyverse" is also a cult.  Much like Cross Fit, tidyverse advocates just can't stop going on and on about it.

Plusses of the tidyverse
=============================================

* Replace `read.table` with `readr::read_delim` wherever possible.  Way faster!
* The `stringr` package makes string manipulation non-crappy.
* Nice date/time manipulation.  Maybe not relevant to much of what we do, though?
* ggplot2
* **dplyr**

WHO tuberculosis data.  (p 163 of book)
======================================

```{r}
head(tidyr::who)
```

Messy!!!
==================================

* Lots of redundant info spread across columns
* Multiple columns referring to the same thing.
* etc.

Let's look at something simpler
========================================

```{r}
library(tidyverse)
make_gb <- function()
{
tibble(student=c("Anadil","Fernando"),
                 exam1=c(11,10),
                 exam1total=c(12,12),
                 exam2=c(14,12),
                 exam2total=c(15,15))
}
gradebook=make_gb()
gradebook
```

Get the weighted percentage for each student using "base" R
=============================================

```{r}
gradebook$wp = (gradebook$exam1/gradebook$exam1total)*(gradebook$exam1total/(gradebook$exam1total+gradebook$exam2total)) + (gradebook$exam2/gradebook$exam2total)*(gradebook$exam2total/(gradebook$exam1total+gradebook$exam2total))
gradebook
```

Let's clean up the data first
===============================================

```{r}
tgb=make_gb() %>% 
  gather(exam1,exam2,key="exam",value="score") %>%
  mutate(total_points=exam1total+exam2total)
tgb
```

Note the side effect!

Better
=========================

```{r}
tgb=make_gb() %>% 
  gather(exam1,exam2,key="exam",value="score") %>%
  mutate(total_points=exam1total+exam2total) %>%
  select(-exam1total, -exam2total)
tgb
```

Let's just do it
==========================

```{r}
tgb=make_gb() %>% 
  gather(exam1,exam2,key="exam",value="score") %>%  # Make 1 column
  mutate(total_points=exam1total+exam2total) %>%    # Add total points
  select(-exam1total, -exam2total) %>%              # Remove unwanted columns
  group_by(student) %>%                             # process each student separately
  summarise(wp=sum(score)/unique(total_points))     # Get the answer
tgb
```

More generally
=====================================

* These tools let you operate on subsets of data via "group by" operations. 
* Code is typically more readable than 'base' R
* Often shorter
* The problem is debugging when things go wrong.

Databases
========================================

* dplyr also has the capacity to join across tables, etc., much like regular database software
* It can also process data in actual database files!!!!!!  You can analyze data TOO LARGE TO FIT IN MEMORY and do it WITHOUT WRITING ANY DATABASE COMMANDS **This is amazing**
* See [here](https://db.rstudio.com/dplyr/) for documentation
* [sqlite3](https://www.sqlite.org/index.html) is an open-source database that doesn't require "root" privileges.  It is also on HPC